import os
import json
import time
import logging
import pandas as pd
from typing import List, Dict

from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

import pika
from sqlalchemy import create_engine, text
from sqlalchemy.exc import OperationalError
from sqlalchemy.dialects.postgresql import insert

# ----------------------------------
# –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
# ----------------------------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")
logger = logging.getLogger(__name__)

# ----------------------------------
# –ù–ê–°–¢–†–û–ô–ö–ò
# ----------------------------------
DOWNLOAD_DIR = os.environ.get("DOWNLOAD_DIR", "downloads")
TOKEN = os.getenv("TELEGRAM_TOKEN", "7585624163:AAEktpBHYvVGWL6iORmFthg6W0F76IXm7DY")

# DSN –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω–æ–π –ë–î: host = –∏–º—è —Å–µ—Ä–≤–∏—Å–∞ compose: postgres
DB_DSN = os.getenv("POSTGRES_DSN", "postgresql+psycopg://postgres:1234@postgres:5432/subsidies")

RABBIT_HOST = os.getenv("RABBIT_HOST", "rabbitmq")
RABBIT_QUEUE = os.getenv("RABBIT_QUEUE", "excel_status")

TABLE_NAME = os.getenv("TARGET_TABLE", "main_table")
UNIQUE_KEY = os.getenv("UNIQUE_KEY", "–®–∏—Ñ—Ä –æ—Ç–±–æ—Ä–∞")  # –∫–ª—é—á –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
# –∫–æ–ª–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∞–ø—Å–µ—Ä—Ç–∏—Ç—å (–∫—Ä–æ–º–µ –∫–ª—é—á–∞)
# UPSERT_COLUMNS = os.getenv("UPSERT_COLUMNS", "")  # "–ö–æ–ª–æ–Ω–∫–∞1,–ö–æ–ª–æ–Ω–∫–∞2"
# UPSERT_COLUMNS = [c.strip() for c in UPSERT_COLUMNS.split(",") if c.strip()]

os.makedirs(DOWNLOAD_DIR, exist_ok=True)

# # SQLAlchemy engine —Å pre_ping –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
# engine = create_engine(
#     DB_DSN,
#     future=True,
#     pool_pre_ping=True,  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
# )

# ----------------------------------
# # –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï: –æ–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ë–î
# # ----------------------------------
# def wait_for_db(max_attempts: int = 30, delay: float = 2.0):
#     for attempt in range(1, max_attempts + 1):
#         try:
#             with engine.connect() as conn:
#                 conn.execute(text("SELECT 1"))
#             logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ")
#             return
#         except OperationalError as e:
#             logger.warning(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ë–î (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts}): {e}")
#             time.sleep(delay)
#     raise RuntimeError("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è")

# # ----------------------------------
# # UPSERT –ò–ó DATAFRAME –í PostgreSQL
# # ----------------------------------
# def _upsert_method(table, conn, keys, data_iter):
#     rows = [dict(zip(keys, row)) for row in data_iter]
#     if not rows:
#         return
#     stmt = insert(table.table).values(rows)

#     # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –Ω–µ –∑–∞–¥–∞–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ, –∫—Ä–æ–º–µ –∫–ª—é—á–∞
#     if UPSERT_COLUMNS:
#         update_cols = {col: stmt.excluded[col] for col in UPSERT_COLUMNS if col != UNIQUE_KEY}
#     else:
#         update_cols = {c.name: stmt.excluded[c.name] for c in table.table.c if c.name != UNIQUE_KEY}

#     stmt = stmt.on_conflict_do_update(
#         index_elements=[UNIQUE_KEY],  # –ø—Ä–∏ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ –º–æ–∂–Ω–æ constraint="..."
#         set_=update_cols,
#     )
#     conn.execute(stmt)

def read_to_dataframe(path: str) -> pd.DataFrame:
    if path.lower().endswith((".xlsx", ".xls")):
        # –º–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å sheet_name=0 –∏ dtype=...
        df = pd.read_excel(path)
    else:
        df = pd.read_csv(path)
    return df

def normalize_columns(df: pd.DataFrame) -> pd.DataFrame:
    # –ß–∞—Å—Ç–æ Excel/CSV –Ω–µ—Å—É—Ç –ø—Ä–æ–±–µ–ª—ã; –ø—Ä–∏–≤–µ–¥—ë–º –∫ —Ç–æ—á–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏—è–º –∫–∞–∫ –µ—Å—Ç—å
    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –º–æ–∂–Ω–æ —Ç—É—Ç –º–∞–ø–ø–∏—Ç—å —Ä—É—Å—Å–∫–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º.
    return df

# def upsert_file_to_db(file_path: str):
#     df = read_to_dataframe(file_path)
#     df = normalize_columns(df)

#     if UNIQUE_KEY not in df.columns:
#         raise ValueError(f"–í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞ '{UNIQUE_KEY}'")

#     # –ï—Å–ª–∏ UPSERT_COLUMNS –∑–∞–¥–∞–Ω, –æ—Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã + –∫–ª—é—á
#     if UPSERT_COLUMNS:
#         keep = [c for c in UPSERT_COLUMNS if c in df.columns]
#         if UNIQUE_KEY not in keep:
#             keep.append(UNIQUE_KEY)
#         df = df[keep]

#     with engine.begin() as conn:
#         df.to_sql(
#             name=TABLE_NAME,
#             con=conn,
#             if_exists="append",
#             index=False,
#             method=_upsert_method,
#             chunksize=1000,
#         )

# ----------------------------------
# RABBITMQ-–û–ë–û–õ–û–ß–ö–ê
# ----------------------------------
class RabbitMQ:
    def __init__(self, host=RABBIT_HOST, queue=RABBIT_QUEUE, max_retries=5, retry_delay=3):
        self.max_retries = max_retries
        self.retry_delay = retry_delay
        self.host = host
        self.queue = queue
        self.connection = None
        self.channel = None
        self._connect()

    def _connect(self):
        for attempt in range(self.max_retries):
            try:
                self.connection = pika.BlockingConnection(
                    pika.ConnectionParameters(
                        self.host,
                        heartbeat=60,
                        blocked_connection_timeout=300
                    )
                )
                self.channel = self.connection.channel()
                self.channel.queue_declare(queue=self.queue, durable=True)
                logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ RabbitMQ")
                return
            except pika.exceptions.AMQPConnectionError as e:
                logger.error(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{self.max_retries}: {e}")
                if attempt < self.max_retries - 1:
                    time.sleep(self.retry_delay)
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RabbitMQ")
                    raise

    def send_message(self, message):
        try:
            if self.connection is None or self.connection.is_closed:
                self._connect()
            self.channel.basic_publish(
                exchange='',
                routing_key=self.queue,
                body=json.dumps(message, ensure_ascii=False),
                properties=pika.BasicProperties(delivery_mode=2)
            )
            logger.info(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: {message}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

    def close(self):
        if self.connection and not self.connection.is_closed:
            self.connection.close()
            logger.info("üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å RabbitMQ –∑–∞–∫—Ä—ã—Ç–æ")

# ----------------------------------
# TELEGRAM-–ë–û–¢
# ----------------------------------
class Bot:
    def __init__(self):
        self.app = ApplicationBuilder().token(TOKEN).build()
        self.rabbitmq = RabbitMQ()
        self._setup_handlers()

    def _setup_handlers(self):
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(MessageHandler(filters.Document.ALL | filters.PHOTO, self.handle_file))

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        welcome_message = (
            "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤.\n"
            f"üìé –û—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª ‚Äî —Å–æ—Ö—Ä–∞–Ω—é –∏ –∑–∞–≥—Ä—É–∂—É –¥–∞–Ω–Ω—ã–µ –≤ –ë–î '{TABLE_NAME}' "
            f"(UPSERT –ø–æ '{UNIQUE_KEY}')."
        )
        await update.message.reply_text(welcome_message)

    async def handle_file(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        message = update.message
        try:
            if message.document:
                tg_file = await context.bot.get_file(message.document.file_id)
                file_name = message.document.file_name
                file_type = "document"
            elif message.photo:
                tg_file = await context.bot.get_file(message.photo[-1].file_id)
                file_name = f"photo_{message.photo[-1].file_id}.jpg"
                file_type = "photo"
            else:
                await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
                return

            file_path = os.path.join(DOWNLOAD_DIR, file_name)
            await tg_file.download_to_drive(file_path)
            await update.message.reply_text(f"‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {file_name}\nüìÅ –ü—É—Ç—å: {file_path}")

            
            rabbit_message = {
                "user_id": message.from_user.id,
                "username": message.from_user.username or "unknown",
                "file_name": file_name,
                "file_type": file_type,
                "file_path": file_path,
                "status": "downloaded",
                "timestamp": message.date.isoformat()
            }
            success = self.rabbitmq.send_message(rabbit_message)
            if success:
                await update.message.reply_text("üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            else:
                await update.message.reply_text("‚ö†Ô∏è –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—á–µ—Ä–µ–¥—å—é")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

    def run(self):
        try:
          
           
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
            self.app.run_polling()
        except KeyboardInterrupt:
            logger.info("‚èπÔ∏è –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        finally:
            self.rabbitmq.close()

# ----------------------------------
# –¢–û–ß–ö–ê –í–•–û–î–ê
# ----------------------------------
if __name__ == "__main__":
    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ RabbitMQ (–µ—Å–ª–∏ –±–µ–∑ healthcheck)
    time.sleep(5)
    bot = Bot()
    bot.run()
