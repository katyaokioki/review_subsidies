import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import asyncpg
import asyncio
from docx import Document
from docx.shared import Cm

# from create_file import description, end_date

BOT_TOKEN = "8371430048:AAGWAVMuwGEvlZ4yTY2MAk0XnRag2RiZQf8"
DATABASE_URL = "postgresql://postgres:1234@db/subsidies"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


from docx import Document
from docx.shared import Cm
import subprocess

from docx import Document
from docx.shared import Cm
import subprocess
import os

class Create_file:

    def __init__(self, subsidy_data):
        self.name = subsidy_data.get('full_name', '')
        self.description = subsidy_data.get('description', '')
        self.link = subsidy_data.get('link', '')
        self.type_recipient = subsidy_data.get('type_recipient', '')
        self.admin_measure = subsidy_data.get('org', '')
        self.cofinancing = subsidy_data.get('cofinancing', '')
        self.start_date = subsidy_data.get('start_date', '')
        self.end_date = subsidy_data.get('end_date', '')
        self.requirements = subsidy_data.get('requirements', '')
        self.date = f"{self.start_date} - {self.end_date}" if self.start_date and self.end_date else ""

    def add_requirements_table(self, doc, text_with_reqs, header="–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è", style="Table Grid"):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏"""
        items = [s.strip() for s in str(text_with_reqs).split("‚Ä¢")]
        items = [s for s in items if s]

        doc.add_heading(header, level=1)
        
        if not items:
            doc.add_paragraph("–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã")
            return None

        table = doc.add_table(rows=1, cols=1)
        table.style = style

        first_cell = table.rows[0].cells[0]
        first_cell.text = items[0]

        for s in items[1:]:
            row_cells = table.add_row().cells
            row_cells[0].text = s

        return table

    def add_table(self, doc, headers, rows, style="Table Grid", add_caption=None):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –≤ –¥–æ–∫—É–º–µ–Ω—Ç"""
        table = doc.add_table(rows=1, cols=len(headers))
        table.style = style
        hdr_cells = table.rows[0].cells
        for j, h in enumerate(headers):
            hdr_cells[j].text = str(h)
        
        for r in rows:
            row_cells = table.add_row().cells
            for j, val in enumerate(r):
                row_cells[j].text = str(val)
        
        if add_caption:
            doc.add_paragraph(add_caption)
        
        return table

    def build_docx(self, output_path="report.docx"):
        """–°–æ–∑–¥–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç Word –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"""
        doc = Document()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞
        for section in doc.sections:
            section.left_margin = Cm(1.2)
            section.right_margin = Cm(1.2)
            section.top_margin = Cm(1.5)
            section.bottom_margin = Cm(1.5)
        
        doc.add_heading("–û—Ç—á—ë—Ç –ø–æ —Å—É–±—Å–∏–¥–∏–∏", level=0)

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        headers1 = ["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º–µ—Ä—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏", "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä—ã"]
        rows1 = [[self.name, self.description]]
        doc.add_heading("–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", level=1)
        self.add_table(doc, headers1, rows1, style="Table Grid")

        doc.add_paragraph()

        # –î–µ—Ç–∞–ª–∏ –º–µ—Ä—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        headers1_1 = ["–Ø–∫–æ—Ä—å", "–ü–æ–∑–∏—Ü–∏—è", "–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–ö–æ–¥ –ø—Ä–æ–¥—É–∫—Ç–∞", "–£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"]
        rows1_1 = [[" ", " ", "–≤–∫–ª", "–Ω–µ—Ç", " ", "–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –º–µ—Ä–∞"]]
        doc.add_heading("–î–µ—Ç–∞–ª–∏ –º–µ—Ä—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏", level=1)
        self.add_table(doc, headers1_1, rows1_1, style="Table Grid")

        doc.add_paragraph()

        # –°—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–¥–∞—á—É –∑–∞—è–≤–∫–∏
        headers2 = ["–°–µ–≥–º–µ–Ω—Ç", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏", "–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞"]
        rows2 = [['MMB', "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", self.link]]
        doc.add_heading("–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏", level=1)
        self.add_table(doc, headers2, rows2, style="Table Grid")

        # –£—Å–ª–æ–≤–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
        headers5 = ["–ü–æ–∑–∏—Ü–∏—è", "–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏—è", "–û–ø–∏—Å–∞–Ω–∏–µ", "–ò–∫–æ–Ω–∫–∞"]
        rows5 = [
            [1, '–ü–æ–ª—É—á–∞—Ç–µ–ª—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏', self.type_recipient, "free-icon-font-user-3917711.svg"],
            [2, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–µ—Ä—ã", self.admin_measure, "free-icon-font-bank-3914993.svg"],
            [3, "–°–æ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ", self.cofinancing, "free-icon-font-badge-percent-7653146.svg"],
            [4, "–î–∞—Ç—ã –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫", self.date, "free-icon-font-calendar-3917244.svg"],
            [5, "–ú–µ—Ö–∞–Ω–∏–∑–º –ø–æ–ª—É—á–µ–Ω–∏—è", "–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ –ø–æ—Ä—Ç–∞–ª", "free-icon-font-apps-3917618.svg"],
        ]
        doc.add_heading("–£—Å–ª–æ–≤–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã", level=1)
        self.add_table(doc, headers5, rows5, style="Table Grid")

        # –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è
        if self.requirements:
            self.add_requirements_table(doc, self.requirements)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        doc.save(output_path)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∞ –Ω–µ –æ–±—ä–µ–∫—Ç Document
        return output_path

    def convert_to_pdf(self, docx_path):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç DOCX –≤ PDF"""
        try:
            subprocess.run([
                "libreoffice", "--headless", "--convert-to", "pdf", 
                docx_path, "--outdir", os.path.dirname(docx_path)
            ], check=True, capture_output=True)
            
            pdf_path = docx_path.replace('.docx', '.pdf')
            return pdf_path if os.path.exists(pdf_path) else None
            
        except (subprocess.CalledProcessError, FileNotFoundError):
            return None
            
            # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class DocumentState(StatesGroup):
    waiting_for_code = State()

async def get_db_connection():
    return await asyncpg.connect(DATABASE_URL)

async def get_subsidies_from_db(min_days=15):
    connection = await get_db_connection()
    try:
        rows = await connection.fetch("""
            SELECT code, full_name, description, end_date
            FROM public.main_table 
            WHERE TO_DATE(SPLIT_PART(end_date, ' ', 1), 'DD.MM.YYYY') - CURRENT_DATE >= $1
            ORDER BY TO_DATE(SPLIT_PART(end_date, ' ', 1), 'DD.MM.YYYY') ASC
        """, min_days)
        
        return [dict(row) for row in rows]
    except Exception as e:
        logging.error(f"Database error: {e}")
        return []
    finally:
        await connection.close()

async def get_subsidy_by_code(code: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—É–±—Å–∏–¥–∏—é –ø–æ –∫–æ–¥—É"""
    connection = await get_db_connection()
    try:
        row = await connection.fetchrow("""
            SELECT code, full_name, description, link, type_recipient, org, cofinancing, start_date, end_date, requirements
            FROM public.main_table 
            WHERE code = $1
        """, code)
        
        return dict(row) if row else None
    except Exception as e:
        logging.error(f"Database error: {e}")
        return None
    finally:
        await connection.close()

# async def generate_document(subsidy_data: dict) -> str:
#     """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å—É–±—Å–∏–¥–∏–∏"""
#     document = f"""
# üèõÔ∏è **–î–û–ö–£–ú–ï–ù–¢ –ü–û –°–£–ë–°–ò–î–ò–ò**

# üìã **–®–∏—Ñ—Ä —Å—É–±—Å–∏–¥–∏–∏:** {subsidy_data['code']}
# üè∑Ô∏è **–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:** {subsidy_data['full_name']}

# üìÑ **–û–ü–ò–°–ê–ù–ò–ï:**
# {subsidy_data['description']}

# üìÖ **–°—Ä–æ–∫ –æ—Ç–±–æ—Ä–∞ –∑–∞—è–≤–æ–∫ –¥–æ:** {subsidy_data['end_date']}
# """

#     if subsidy_data.get('amount'):
#         document += f"üíµ **–†–∞–∑–º–µ—Ä —Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏—è:** {subsidy_data['amount']}\n\n"

#     if subsidy_data.get('requirements'):
#         document += f"üìã **–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –£–ß–ê–°–¢–ù–ò–ö–ê–ú:**\n{subsidy_data['requirements']}\n\n"

#     if subsidy_data.get('organization'):
#         document += f"üè¢ **–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:** {subsidy_data['organization']}\n"

#     if subsidy_data.get('contact_info'):
#         document += f"üìû **–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:** {subsidy_data['contact_info']}\n"

#     document += f"\n---\n*–î–æ–∫—É–º–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏*"

#     return document

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ü–æ–ª—É—á–∏—Ç—å —Å—É–±—Å–∏–¥–∏–∏", callback_data="get_subsidies")],
            [InlineKeyboardButton(text="üìÑ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="get_doc")]
        ]
    )
    
    await message.answer(
        "üíº **–ë–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—É–±—Å–∏–¥–∏—è—Ö**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@dp.message(Command("get_doc"))
async def cmd_get_doc(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ –∫–æ–¥—É —Å—É–±—Å–∏–¥–∏–∏"""
    await message.answer(
        "üìÑ **–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ —Å—É–±—Å–∏–¥–∏–∏**\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å—É–±—Å–∏–¥–∏–∏:\n"
        "–ü—Ä–∏–º–µ—Ä: 25-961-25310-2-0176"
    )
    await state.set_state(DocumentState.waiting_for_code)

@dp.callback_query(lambda c: c.data == "get_doc")
async def process_get_doc(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    await callback.answer()
    await callback.message.answer(
        "üìÑ **–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ —Å—É–±—Å–∏–¥–∏–∏**\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å—É–±—Å–∏–¥–∏–∏:\n"
        "–ü—Ä–∏–º–µ—Ä: 25-961-25310-2-0176"
    )
    await state.set_state(DocumentState.waiting_for_code)

@dp.message(DocumentState.waiting_for_code)
async def process_subsidy_code(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ —Å—É–±—Å–∏–¥–∏–∏"""
    code = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥—É—é –ø—Ä–æ–≤–µ—Ä–∫—É)
    if len(code) < 5:
        await message.answer("‚ùå –ö–æ–¥ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ —Å—É–±—Å–∏–¥–∏–∏:")
        return
    
    await message.answer("üîç –ü–æ–∏—Å–∫ —Å—É–±—Å–∏–¥–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ò—â–µ–º —Å—É–±—Å–∏–¥–∏—é –ø–æ –∫–æ–¥—É
    subsidy_data = await get_subsidy_by_code(code)
    
    if not subsidy_data:
        await message.answer(
            f"‚ùå –°—É–±—Å–∏–¥–∏—è —Å –∫–æ–¥–æ–º `{code}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n"
            "–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥:"
        )
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    doc_generator = Create_file(subsidy_data)
    docx_path = f"subsidy_{code}.docx"
        
    # build_docx —Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –∞ –Ω–µ –æ–±—ä–µ–∫—Ç Document
    file_path = doc_generator.build_docx(docx_path)


    with open(file_path, 'rb') as file:
        await message.answer_document(
            document=types.BufferedInputFile(
                file.read(), 
                filename=f"subsidy_{code}.docx"
            ),
            caption=f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç –ø–æ —Å—É–±—Å–∏–¥–∏–∏ {code}"
        )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìä –í—Å–µ —Å—É–±—Å–∏–¥–∏–∏", callback_data="get_subsidies")],
            [InlineKeyboardButton(text="üìÑ –ù–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="get_doc")]
        ]
    )
    
    await message.answer(document, reply_markup=keyboard)
    await state.clear()

@dp.callback_query(lambda c: c.data == "get_subsidies")
async def process_get_subsidies(callback: types.CallbackQuery):
    await callback.answer()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    await callback.message.edit_text("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
    
    subsidies = await get_subsidies_from_db()
    print(subsidies)
    
    if not subsidies:
        await callback.message.edit_text(
            "‚ùå –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—É–±—Å–∏–¥–∏–π.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—É–±—Å–∏–¥–∏—é
    await send_subsidy_details(callback.message, subsidies, 0)

async def send_subsidy_details(message: types.Message, subsidies: list, index: int):
    subsidy = subsidies[index]
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                    callback_data=f"subsidy_{max(0, index-1)}"
                ),
                InlineKeyboardButton(
                    text=f"{index+1}/{len(subsidies)}", 
                    callback_data="current"
                ),
                InlineKeyboardButton(
                    text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", 
                    callback_data=f"subsidy_{min(len(subsidies)-1, index+1)}"
                )
            ],
            [
                InlineKeyboardButton(text="üìã –í—Å–µ —Å—É–±—Å–∏–¥–∏–∏", callback_data="all_subsidies"),
                InlineKeyboardButton(text="üìÑ –î–æ–∫—É–º–µ–Ω—Ç –ø–æ –∫–æ–¥—É", callback_data="get_doc")
            ]
        ]
    )
    
    text = (
        f"üèõÔ∏è **{subsidy['full_name']}**\n\n"
        f"üíµ **–®–∏—Ñ—Ä:** {subsidy['code']}\n"
        f"üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {subsidy['description']}\n"
        f"üìÖ **–û—Ç–±–æ—Ä –¥–æ:** {subsidy['end_date']}\n"
    )
    
    if subsidy.get('requirements'):
        text += f"üìã **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:** {subsidy['requirements']}\n"
    
    await message.edit_text(text, reply_markup=keyboard)

@dp.callback_query(lambda c: c.data.startswith('subsidy_'))
async def process_subsidy_navigation(callback: types.CallbackQuery):
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –∏–∑ callback_data
    index = int(callback.data.split('_')[1])
    subsidies = await get_subsidies_from_db()
    
    if subsidies:
        await send_subsidy_details(callback.message, subsidies, index)

@dp.callback_query(lambda c: c.data == "all_subsidies")
async def process_all_subsidies(callback: types.CallbackQuery):
    await callback.answer()
    
    subsidies = await get_subsidies_from_db()
    
    if not subsidies:
        await callback.message.edit_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—É–±—Å–∏–¥–∏–π.")
        return
    
    text = "üèõÔ∏è **–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—É–±—Å–∏–¥–∏–∏:**\n\n"
    
    for i, subsidy in enumerate(subsidies, 1):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –∏–∑ –≤–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        text += f"{i}. **{subsidy['full_name']}** - {subsidy['code']}\n"
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data="get_subsidies")],
            [InlineKeyboardButton(text="üìÑ –î–æ–∫—É–º–µ–Ω—Ç –ø–æ –∫–æ–¥—É", callback_data="get_doc")]
        ]
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞ –∫–æ–¥–∞
@dp.message(Command("cancel"))
async def cmd_cancel(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    
    await state.clear()
    await message.answer(
        "‚ùå –í–≤–æ–¥ –∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω.\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /get_doc",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üìÑ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="get_doc")]]
        )
    )

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())